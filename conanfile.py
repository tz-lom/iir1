from conans import ConanFile, CMake, tools


class IirConan(ConanFile):
    name = "iir1"
    version = "1.7.7"
    license = "MIT"
    author = "Bernd Porr <mail@berndporr.me.uk>"
    url = "https://github.com/berndporr/iir1"
    description = "An infinite impulse response (IIR) filter library for Linux, Mac OSX and Windows which implements Butterworth, RBJ, Chebychev filters and can easily import coefficients generated by Python (scipy)."
    topics = ("iir", "dsp", "filters")
    settings = "os", "compiler", "build_type", "arch"
    options = {"shared": [True, False]}
    default_options = {"shared": False}
    generators = "cmake"

    def source(self):
        git = tools.Git(folder="iir1")
        git.clone("https://github.com/berndporr/iir1.git", self.version)
        # This small hack might be useful to guarantee proper /MT /MD linkage
        # in MSVC if the packaged project doesn't have variables to set it
        # properly
        tools.replace_in_file("iir1/CMakeLists.txt", "include(GNUInstallDirs)",
                              '''include(GNUInstallDirs)
include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup()''')

    def build(self):
        cmake = CMake(self)
        cmake.configure(source_folder="iir1", defs={"CMAKE_POSITION_INDEPENDENT_CODE": True})
        cmake.build()

    def package(self):
        self.copy("*.h", dst="include", src="iir1", excludes="test/*")
        if self.options.shared:
            self.copy("*.dll", dst="bin", keep_path=False)
            self.copy("*.so", dst="lib", keep_path=False)
            self.copy("*.dylib", dst="lib", keep_path=False)
        else:
            self.copy("*.lib", dst="lib", keep_path=False)
            self.copy("*.a", dst="lib", keep_path=False)

    def package_info(self):
        self.cpp_info.libs = ["iir" if self.options.shared else "iir_static" ]

